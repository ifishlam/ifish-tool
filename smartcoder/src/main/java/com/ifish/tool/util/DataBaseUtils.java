package com.ifish.tool.util;

import com.ifish.tool.bean.ColumnBean;

import java.sql.*;
import java.util.*;

public class DataBaseUtils {

    public static Map<String, List<ColumnBean>> getTableDetails(String targetTableName) {

        Map<String, List<ColumnBean>> result = new HashMap();

        // get application properties file
        Properties props = FileUtils.getPropertiesFile();

        // get DB connection
        Connection connection = getConnection(props);

        // prepare sql
        String sql = props.getProperty("db.sql.query.system.columns");
        if (targetTableName != null) {
            sql = sql.replace("{andClause}", " and table_name = '" + targetTableName.trim() + "' ");
        } else {
            sql = sql.replace("{andClause}", "");
        }

        ObjectUtils.debugLog("SQL to be execute:" + sql);

        try {
            List<ColumnBean> columnList = null;
            ColumnBean column = null;
            String tableName = "";
            String columnName = "";
            String dataType = "";

            // execute sql
            Statement statement = connection.createStatement();
            ResultSet res = statement.executeQuery(sql);

            // process result
            while (res.next()) {
                if (!tableName.equalsIgnoreCase(res.getString("table_name"))) {
                    if (tableName != "") {
                        result.put(tableName, columnList);
                    }
                    columnList = new ArrayList();
                }

                column = new ColumnBean();

                tableName = res.getString("table_name");
                columnName = res.getString("column_name");
                dataType = res.getString("data_type");

                column.setTableName(tableName);
                column.setTableNameFirstUpper(ObjectUtils.format2CamelName(tableName, true));

                column.setColumnName(columnName);
                column.setColumnNameFirstUpper(ObjectUtils.format2CamelName(columnName, true));
                column.setColumnNameFirstLower(ObjectUtils.format2CamelName(columnName, false));

                column.setColumnDataType(dataType);
                column.setColumnDataTypeInJava(ObjectUtils.convert2JavaDataType(dataType));

                column.setPrimaryKey("PRI".equalsIgnoreCase(res.getString("column_key")));
                column.setAutoGeneratedId("auto_increment".equalsIgnoreCase(res.getString("extra")));

                columnList.add(column);
            }
            result.put(tableName, columnList);

            // close DB connection
            res.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return result;
    }

    public static Connection getConnection(Properties props) {
        Connection connection = null;

        try {
            Class.forName(props.getProperty("datasource.driver-class-name"));

            // get DB Connection
            connection = DriverManager.getConnection(props.getProperty("datasource.url"), props.getProperty("datasource.username"), props.getProperty("datasource.password"));
            if (connection.isClosed()) {
                ObjectUtils.debugLog("Database (" + props.getProperty("datasource.url") + ") was closed");
                return null;
            } else {
                ObjectUtils.debugLog("Database (" + props.getProperty("datasource.url") + ") was connected");
            }
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return connection;
    }
}
